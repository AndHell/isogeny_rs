use super::sidh::SidhParameters;
use crate::{elliptic::basis::BasisX, fields::sike::SikeOne as Fp2};

// 2^216 * 3^137 - 1
static EA: usize = 216;
static EB: usize = 137;

static P2_X_RE_BYTES: [u8; 56] = [
    0, 0, 60, 207, 197, 225, 240, 80, 3, 3, 99, 230, 146, 10, 15, 122, 76, 108, 113, 230, 61, 230,
    58, 14, 100, 117, 175, 98, 25, 149, 112, 95, 124, 132, 80, 12, 178, 187, 97, 233, 80, 225, 158,
    171, 134, 97, 210, 92, 74, 80, 237, 39, 150, 70, 203, 72,
];
static P2_X_IM_BYTES: [u8; 56] = [
    0, 1, 173, 28, 28, 174, 120, 64, 237, 218, 109, 138, 146, 69, 32, 246, 14, 87, 61, 59, 157,
    250, 198, 209, 137, 148, 28, 178, 35, 38, 210, 132, 168, 129, 108, 196, 36, 148, 16, 254, 128,
    214, 128, 71, 216, 35, 201, 125, 112, 82, 70, 248, 105, 227, 234, 80,
];
static P2_X: Fp2 = Fp2::const_decode_no_check(&P2_X_RE_BYTES, &P2_X_IM_BYTES);

static Q2_X_RE_BYTES: [u8; 56] = [
    0, 0, 199, 70, 23, 56, 52, 14, 252, 240, 156, 227, 136, 246, 102, 235, 56, 247, 243, 175, 212,
    45, 192, 182, 100, 217, 244, 97, 243, 26, 162, 237, 198, 180, 171, 113, 189, 66, 244, 215, 192,
    88, 225, 63, 100, 178, 55, 239, 125, 221, 42, 188, 13, 235, 12, 108,
];
static Q2_X_IM_BYTES: [u8; 56] = [
    0, 0, 37, 222, 55, 21, 127, 80, 215, 93, 50, 13, 208, 104, 42, 180, 166, 126, 71, 21, 134, 251,
    194, 211, 26, 163, 46, 105, 87, 250, 43, 38, 20, 196, 205, 64, 161, 226, 114, 131, 234, 175,
    66, 114, 174, 81, 120, 71, 25, 116, 50, 226, 214, 28, 133, 245,
];
static Q2_X: Fp2 = Fp2::const_decode_no_check(&Q2_X_RE_BYTES, &Q2_X_IM_BYTES);

static R2_X_RE_BYTES: [u8; 56] = [
    0, 0, 243, 122, 179, 75, 160, 206, 173, 148, 244, 60, 220, 80, 222, 6, 173, 25, 198, 124, 228,
    146, 131, 70, 232, 41, 203, 146, 88, 13, 168, 77, 124, 54, 80, 106, 37, 22, 105, 107, 190, 58,
    235, 82, 58, 215, 23, 42, 109, 35, 149, 19, 197, 253, 37, 22,
];
static R2_X_IM_BYTES: [u8; 56] = [
    0, 1, 150, 202, 46, 208, 106, 101, 126, 144, 167, 53, 67, 243, 144, 44, 32, 143, 65, 8, 149,
    180, 156, 248, 76, 216, 155, 233, 237, 110, 78, 231, 232, 223, 144, 176, 95, 63, 219, 139, 223,
    228, 137, 209, 179, 85, 142, 152, 112, 19, 249, 128, 96, 54, 197, 172,
];
static R2_X: Fp2 = Fp2::const_decode_no_check(&R2_X_RE_BYTES, &R2_X_IM_BYTES);

static P3_X_RE_BYTES: [u8; 56] = [
    0, 0, 134, 100, 134, 94, 167, 216, 22, 240, 59, 49, 226, 35, 194, 109, 64, 106, 44, 108, 208,
    195, 214, 103, 70, 96, 86, 170, 232, 88, 149, 236, 55, 54, 139, 252, 0, 157, 250, 252, 179,
    217, 126, 99, 159, 101, 233, 228, 95, 70, 87, 59, 6, 55, 183, 169,
];
static P3_X_IM_BYTES: [u8; 56] = [0; 56];
static P3_X: Fp2 = Fp2::const_decode_no_check(&P3_X_RE_BYTES, &P3_X_IM_BYTES);

static Q3_X_RE_BYTES: [u8; 56] = [
    0, 1, 46, 132, 215, 101, 37, 88, 230, 148, 191, 132, 193, 251, 218, 175, 153, 184, 59, 66, 102,
    195, 46, 198, 91, 16, 69, 123, 202, 249, 76, 99, 235, 6, 54, 129, 232, 177, 231, 57, 140, 11,
    36, 28, 25, 185, 102, 95, 219, 158, 20, 6, 218, 61, 56, 70,
];
static Q3_X_IM_BYTES: [u8; 56] = [0; 56];
static Q3_X: Fp2 = Fp2::const_decode_no_check(&Q3_X_RE_BYTES, &Q3_X_IM_BYTES);

static R3_X_RE_BYTES: [u8; 56] = [
    0, 1, 205, 40, 89, 114, 86, 212, 255, 231, 224, 2, 232, 120, 112, 117, 42, 143, 138, 100, 161,
    204, 120, 181, 162, 18, 32, 116, 120, 63, 81, 180, 253, 233, 14, 137, 196, 142, 217, 26, 143,
    74, 12, 203, 172, 191, 167, 245, 26, 137, 206, 81, 138, 82, 183, 108,
];
static R3_X_IM_BYTES: [u8; 56] = [
    0, 1, 71, 7, 50, 144, 215, 141, 208, 204, 132, 32, 177, 24, 129, 135, 209, 164, 157, 191, 162,
    79, 38, 170, 212, 107, 45, 155, 181, 71, 219, 182, 246, 58, 118, 14, 203, 12, 43, 32, 190, 82,
    251, 119, 189, 39, 118, 195, 209, 75, 203, 196, 4, 115, 106, 228,
];
static R3_X: Fp2 = Fp2::const_decode_no_check(&R3_X_RE_BYTES, &R3_X_IM_BYTES);

static TWO_TORSION: BasisX<Fp2> = BasisX::from_x_coords(&P2_X, &Q2_X, &R2_X);
static THREE_TORSION: BasisX<Fp2> = BasisX::from_x_coords(&P2_X, &Q2_X, &R2_X);

// Scalars have 28 bytes (224 bits).
// (max(log(2**216, 2), log(3**137 , 2)) + 7) // 8
pub static SIDH_434: SidhParameters<Fp2, 28> =
    SidhParameters::new(EA, EB, &TWO_TORSION, &THREE_TORSION);

// TODO: other security levels
